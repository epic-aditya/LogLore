// Export utilities for LogLore
export const downloadAsMarkdown = (result, logText, mode) => {
  const timestamp = new Date().toISOString().split('T')[0];
  
  const markdownContent = `# LogLore Analysis Report
**Date:** ${timestamp}
**Mode:** ${mode}

## Original Error Log
\`\`\`
${logText}
\`\`\`

## Redacted Log
\`\`\`
${result.redacted}
\`\`\`

## AI Solution
${result.answer}

---
*Generated by LogLore - AI Error Assistant*
`;

  const blob = new Blob([markdownContent], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `loglore-analysis-${timestamp}.md`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const downloadAsJSON = (result, logText, mode) => {
  const timestamp = new Date().toISOString();
  
  const jsonContent = {
    timestamp,
    mode,
    originalLog: logText,
    redactedLog: result.redacted,
    aiSolution: result.answer,
    generatedBy: "LogLore AI Error Assistant"
  };

  const blob = new Blob([JSON.stringify(jsonContent, null, 2)], { type: 'application/json' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `loglore-analysis-${timestamp.split('T')[0]}.json`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const copyAsGitHubIssue = (result, logText, mode) => {
  const githubTemplate = `## Error Report

**Environment:**
- Mode: ${mode}
- Date: ${new Date().toISOString().split('T')[0]}

## Error Log
\`\`\`
${result.redacted}
\`\`\`

## Proposed Solution
${result.answer}

## Steps to Reproduce
1. [Add steps here]
2. [Add steps here]

## Additional Context
[Add any additional context here]

---
*Generated by LogLore AI Error Assistant*
`;

  navigator.clipboard.writeText(githubTemplate);
  return githubTemplate;
};
